type VotingProcess @entity {
  id: ID!
  user: User!
  contract: Bytes!
  question: String!
  description: String!
  uri: String!
  answers: [Answer!] @derivedFrom(field: "votingProcess")
  votes: [Vote!] @derivedFrom(field: "votingProcess")
  acceptedTokens: [TokenVotingProcess!] @derivedFrom(field: "votingProcess")
}

type TokenVotingProcess @entity {
  id: ID!
  votingProcess: VotingProcess!
  token: Token!
}

type Token @entity {
  id: ID!
  address: Bytes!
  votingProcesses: [TokenVotingProcess!] @derivedFrom(field: "token")
}

type Answer @entity {
  id: ID!
  answer: String!
  votingProcess: VotingProcess!
  voted: [Vote!] @derivedFrom(field: "answer")
}

type Vote @entity {
  id: ID!
  user: User!
  votingProcess: VotingProcess!
  answer: Answer!
  votingToken: Token!
  votingAmount: BigInt!
}

type User @entity {
  id: ID!
  address: Bytes!
  votingProcesses: [VotingProcess!] @derivedFrom(field: "user")
  voted: [Vote!] @derivedFrom(field: "user")
}
