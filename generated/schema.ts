// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class VotingProcess extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save VotingProcess entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save VotingProcess entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("VotingProcess", id.toString(), this);
  }

  static load(id: string): VotingProcess | null {
    return store.get("VotingProcess", id) as VotingProcess | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get contract(): Bytes {
    let value = this.get("contract");
    return value.toBytes();
  }

  set contract(value: Bytes) {
    this.set("contract", Value.fromBytes(value));
  }

  get question(): string {
    let value = this.get("question");
    return value.toString();
  }

  set question(value: string) {
    this.set("question", Value.fromString(value));
  }

  get description(): string {
    let value = this.get("description");
    return value.toString();
  }

  set description(value: string) {
    this.set("description", Value.fromString(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get answers(): Array<string> | null {
    let value = this.get("answers");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set answers(value: Array<string> | null) {
    if (value === null) {
      this.unset("answers");
    } else {
      this.set("answers", Value.fromStringArray(value as Array<string>));
    }
  }

  get votes(): Array<string> | null {
    let value = this.get("votes");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votes(value: Array<string> | null) {
    if (value === null) {
      this.unset("votes");
    } else {
      this.set("votes", Value.fromStringArray(value as Array<string>));
    }
  }

  get acceptedTokens(): Array<string> | null {
    let value = this.get("acceptedTokens");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set acceptedTokens(value: Array<string> | null) {
    if (value === null) {
      this.unset("acceptedTokens");
    } else {
      this.set("acceptedTokens", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class TokenVotingProcess extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenVotingProcess entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenVotingProcess entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenVotingProcess", id.toString(), this);
  }

  static load(id: string): TokenVotingProcess | null {
    return store.get("TokenVotingProcess", id) as TokenVotingProcess | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get votingProcess(): string {
    let value = this.get("votingProcess");
    return value.toString();
  }

  set votingProcess(value: string) {
    this.set("votingProcess", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Token entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Token entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Token", id.toString(), this);
  }

  static load(id: string): Token | null {
    return store.get("Token", id) as Token | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get votingProcesses(): Array<string> | null {
    let value = this.get("votingProcesses");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votingProcesses(value: Array<string> | null) {
    if (value === null) {
      this.unset("votingProcesses");
    } else {
      this.set(
        "votingProcesses",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }
}

export class Answer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Answer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Answer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Answer", id.toString(), this);
  }

  static load(id: string): Answer | null {
    return store.get("Answer", id) as Answer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get answer(): string {
    let value = this.get("answer");
    return value.toString();
  }

  set answer(value: string) {
    this.set("answer", Value.fromString(value));
  }

  get votingProcess(): string {
    let value = this.get("votingProcess");
    return value.toString();
  }

  set votingProcess(value: string) {
    this.set("votingProcess", Value.fromString(value));
  }

  get voted(): Array<string> | null {
    let value = this.get("voted");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set voted(value: Array<string> | null) {
    if (value === null) {
      this.unset("voted");
    } else {
      this.set("voted", Value.fromStringArray(value as Array<string>));
    }
  }
}

export class Vote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Vote entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Vote entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Vote", id.toString(), this);
  }

  static load(id: string): Vote | null {
    return store.get("Vote", id) as Vote | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get votingProcess(): string {
    let value = this.get("votingProcess");
    return value.toString();
  }

  set votingProcess(value: string) {
    this.set("votingProcess", Value.fromString(value));
  }

  get answer(): string {
    let value = this.get("answer");
    return value.toString();
  }

  set answer(value: string) {
    this.set("answer", Value.fromString(value));
  }

  get votingToken(): string {
    let value = this.get("votingToken");
    return value.toString();
  }

  set votingToken(value: string) {
    this.set("votingToken", Value.fromString(value));
  }

  get votingAmount(): BigInt {
    let value = this.get("votingAmount");
    return value.toBigInt();
  }

  set votingAmount(value: BigInt) {
    this.set("votingAmount", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get votingProcesses(): Array<string> | null {
    let value = this.get("votingProcesses");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set votingProcesses(value: Array<string> | null) {
    if (value === null) {
      this.unset("votingProcesses");
    } else {
      this.set(
        "votingProcesses",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get voted(): Array<string> | null {
    let value = this.get("voted");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set voted(value: Array<string> | null) {
    if (value === null) {
      this.unset("voted");
    } else {
      this.set("voted", Value.fromStringArray(value as Array<string>));
    }
  }
}
